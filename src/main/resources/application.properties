# Enable H2 console
#spring.h2.console.enabled=true
#spring.h2.console.path=/h2-console

# Configure data initialization
spring.jpa.defer-datasource-initialization=true
# Consider changing init.mode after the first run with a file DB if data.sql isn't safe to re-run
spring.sql.init.mode=always 
# spring.sql.init.mode=embedded # Default - runs if using an embedded DB like H2 and no schema manager used

# --- Switch to File-Based H2 Database ---
# This will create database files in a 'data' subdirectory where the app runs
#spring.datasource.url=jdbc:h2:file:./data/ecommdb;AUTO_SERVER=TRUE
#spring.datasource.url=jdbc:h2:file:~/data/ecommdb;AUTO_SERVER=TRUE
# Or store in your user home directory:
# spring.datasource.url=jdbc:h2:file:~/data/ecommdb;AUTO_SERVER=TRUE

#spring.datasource.driverClassName=org.h2.Driver
#spring.datasource.username=sa
#spring.datasource.password=
#spring.jpa.database-platform=org.hibernate.dialect.H2Dialect

# Optional: Control how Hibernate interacts with the schema after creation
# 'validate': checks if schema matches entities, 'update': tries to update schema, 'none': does nothing
 spring.jpa.hibernate.ddl-auto=validate


# PostgreSQL DataSource Configuration
spring.datasource.url=jdbc:postgresql://<your_postgres_host>:<your_postgres_port>/<your_database_name>
spring.datasource.username=<your_postgres_username>
spring.datasource.password=<your_postgres_password>
spring.datasource.driver-class-name=org.postgresql.Driver

# Set Hibernate dialect for PostgreSQL
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
# Or use: spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect